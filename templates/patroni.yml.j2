#jinja2: lstrip_blocks: "True"
scope: {{ patroni_scope | default('main') }}
namespace: {{ patroni_namespace | default('/service/') }}
name: {{ patroni_name | default(inventory_hostname) }}

restapi:
  listen: {{ patroni_restapi_listen | default('0.0.0.0:8008') }}
  connect_address: {{ patroni_restapi_connect_address | default('127.0.0.1:8008') }}
  certfile: {{ patroni_restapi_certfile | default(None) }}
  keyfile: {{ patroni_restapi_keyfile | default(None) }}
{% if not( (patroni_restapi_username is none) or (patroni_restapi_username | trim == '') ) and not( (patroni_restapi_password is none) or (patroni_restapi_password | trim == '') ) %}
  authentication:
    username: {{ patroni_restapi_username }}
    password: {{ patroni_restapi_password }}
{% endif %}

{% include (patroni_dcs | default('etcd')) + '.yml.j2' %}

bootstrap:
  # this section will be written into Etcd:/<namespace>/<scope>/config after initializing new cluster
  # and all other cluster members will use it as a `global configuration`
  dcs:
    ttl: {{ patroni_bootstrap_dcs_ttl | default(30) }}
    loop_wait: {{ patroni_bootstrap_dcs_loop_wait | default(10) }}
    retry_timeout: {{ patroni_bootstrap_dcs_retry_timeout | default(10) }}
    maximum_lag_on_failover: {{ patroni_bootstrap_dcs_maximum_lag_on_failover | default(1048576) }}
    master_start_timeout: {{ patroni_bootstrap_dcs_master_start_timeout | default(300) }}
    synchronous_mode: {{ patroni_bootstrap_dcs_synchronous_mode | default('false') }}
    postgresql:
      use_pg_rewind: {{ patroni_bootstrap_dcs_postgresql_use_pg_rewind | default('true') }}
      use_slots: {{ patroni_bootstrap_dcs_postgresql_use_slots | default('true') }}
    {% if patroni_bootstrap_dcs_postgresql_parameters | length > 0 %}
      parameters:
      {% for guc in patroni_bootstrap_dcs_postgresql_parameters %}
        {{ guc.option }}: {{ guc.value}}
      {% endfor %}
    {% endif %}
    {% if patroni_bootstrap_dcs_postgresql_recovery_conf | length > 0 %}
      recovery_conf:
      {% for item in patroni_bootstrap_dcs_postgresql_recovery_conf %}
        {{ item.option }}: {{ item.value}}
      {% endfor %}
    {% endif %}

{% if not( (patroni_bootstrap_method_name is none) or (patroni_bootstrap_method_name | trim == '') ) and not( (patroni_bootstrap_method_command is none) or (patroni_bootstrap_method_command | trim == '') ) %}
  method: {{ patroni_bootstrap_method_name }}
  {{ patroni_bootstrap_method_name }}:
    command: {{ patroni_bootstrap_method_command }}
    keep_existing_recovery_conf: {{ patroni_bootstrap_method_keep_existing_recovery_conf }}
  {% if patroni_bootstrap_method_recovery_conf | length > 0 %}
    recovery_conf:
    {% for item in patroni_bootstrap_method_recovery_conf %}
      {{ item.option }}: {{ item.value }}
    {% endfor %}
  {% endif %}
{% endif %}

{% if patroni_bootstrap_initdb | length > 0 %}
  # some desired options for 'initdb'
  initdb: # Note: It needs to be a list (some options need values, others are switches)
  {% for item in patroni_bootstrap_initdb %}
    {% if item.value is undefined %}
    - {{ item.option }}
    {% else %}
    - {{ item.option }}: {{ item.value}}
    {% endif %}
  {% endfor %}
{% endif %}

{% if patroni_bootstrap_pg_hba | length > 0 %}
  pg_hba:  # Add following lines to pg_hba.conf after running 'initdb'
  {% for client in patroni_bootstrap_pg_hba %}
    - {{ client.type }} {{ client.database }} {{ client.user }} {{ client.address|default(None) }} {{ client.method }}
  {% endfor %}
{% endif %}

{% if patroni_bootstrap_users | length > 0 %}
  # Some additional users users which needs to be created after initializing new cluster
  users:
  {% for user in patroni_bootstrap_users %}
    {{ user.name }}:
      password: {{ user.password }}
    {% if user.options | length > 0 %}
      options:
      {% for option in user.options %}
        - {{ option }}
      {% endfor %}
    {% endif %}
  {% endfor %}
{% endif %}

{% if not( (patroni_bootstrap_post_bootstrap is none) or (patroni_bootstrap_post_bootstrap | trim == '') ) %}
  post_bootstrap: {{ patroni_bootstrap_post_bootstrap }}
{% endif %}
{% if not( (patroni_bootstrap_post_init is none) or (patroni_bootstrap_post_init | trim == '') ) %}
  # Additional script to be launched after initial cluster creation (will be passed the connection URL as parameter)
  post_init: {{ patroni_bootstrap_post_init }}
{% endif %}

postgresql:
{% if patroni_postgresql_authentication | length > 0 %}
  authentication:
  {% for item in patroni_postgresql_authentication %}
    {{ item.type }}:
      username: {{ item.username }}
      password: {{ item.password }}
  {% endfor %}
{% endif %}
{% if patroni_postgresql_callbacks | length > 0 %}
  callbacks:
  {% for callback in patroni_postgresql_callbacks %}
    {% if not( (callback.script is none) or (callback.script | trim == '') ) %}
    {{ callback.event }}: {{ callback.script }}
    {% endif %}
  {% endfor %}
{% endif %}
  connect_address: {{ patroni_postgresql_connect_address | default(ansible_host + ':5432') }}
  create_replica_methods:
    - {{ patroni_postgresql_create_replica_methods | default('basebackup') }}
  data_dir: {{ patroni_postgresql_data_dir }}
  config_dir: {{ patroni_postgresql_config_dir }}
  bin_dir: {{ patroni_postgresql_bin_dir }}
  listen: {{ patroni_postgresql_listen | default('0.0.0.0:5432') }}
  use_unix_socket: {{ patroni_postgresql_use_unix_socket | default('true') }}
  pgpass: {{ patroni_postgresql_pgpass | default('/var/lib/postgresql/.pgpass') }}
{% if patroni_postgresql_recovery_conf | length > 0 %}
  recovery_conf:
  {% for item in patroni_postgresql_recovery_conf %}
    {{ item.option }}: {{ item.value}}
  {% endfor %}
{% endif %}
{% if not( (patroni_postgresql_custom_conf is none) or (patroni_postgresql_custom_conf | trim == '') ) %}
  custom_conf: {{ patroni_postgresql_custom_conf }}
{% endif %}
{% if patroni_postgresql_parameters | length > 0 %}
  parameters:
  {% for guc in patroni_postgresql_parameters %}
    {{ guc.option }}: '{{ guc.value}}'
  {% endfor %}
{% endif %}
{% if patroni_postgresql_pg_hba | length > 0 %}
  pg_hba:
  {% for client in patroni_postgresql_pg_hba %}
    - {{ client.type }} {{ client.database }} {{ client.user }} {{ client.address|default(None) }} {{ client.method }}
  {% endfor %}
{% endif %}
  pg_ctl_timeout: {{ patroni_postgresql_pg_ctl_timeout | default(60) }}
{% if patroni_postgresql_use_pg_rewind %}
  use_pg_rewind: true
  pg_rewind:
    username: {{ patroni_superuser_username }}
    password: {{ patroni_superuser_password }}
  remove_data_directory_on_rewind_failure: {{ patroni_postgresql_remove_data_directory_on_rewind_failure | default('false') }}
{% endif %}    
{% if not( (patroni_postgresql_replica_method is none) or (patroni_postgresql_replica_method | trim == '') ) %}
  replica_method: {{ patroni_postgresql_replica_method }}
{% endif -%}  

{% if patroni_watchdog_mode in ('automatic', 'required') %}
watchdog:
  mode: {{ patroni_watchdog_mode }} # Allowed values: off, automatic, required
  device: {{ patroni_watchdog_device }}
  safety_margin: {{ patroni_watchdog_safety_margin }}
{% endif %}

{% if patroni_tags | length > 0 %}
tags:
  {% for tag in patroni_tags %}
    {{ tag.name }}: {{ tag.value }}
  {% endfor %}
{% endif %}
